from typing import Any, OrderedDict, Type, Union

import pandas

from lorelie.backends import BaseRow, SQLiteBackend
from lorelie.migrations import Migrations
from lorelie.tables import Table


class Databases:
    database_map: OrderedDict[str, Database] = ...

    def __init__(self) -> None: ...
    def __getitem__(self, name: str) -> Database: ...
    def __contains__(self, value: Any) -> bool: ...

    def register(self, database: Database) -> None: ...


databases: Databases


class DatabaseManager:
    table_map: dict[str, Table] = ...
    database: Database = ...

    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...

    def __get__(
        self,
        instance: Database,
        cls: Type[Database] = ...
    ) -> DatabaseManager: ...

    def before_action(self, table_name: str) -> None: ...
    def first(self, table: str) -> BaseRow: ...
    def last(self, table: str) -> BaseRow: ...
    def all(self, table: str) -> list[BaseRow]: ...
    def create(self, table: str, **kwargs) -> BaseRow: ...
    def filter(self, table: str, **kwargs) -> list[BaseRow]: ...
    def get(self, table: str, **kwargs) -> BaseRow: ...
    def annotate(self, table: str, **kwargs) -> list[BaseRow]: ...
    def as_values(self, table: str, *args: str) -> list[dict[str, Any]]: ...
    def as_dataframe(self, table: str, **kwarg) -> pandas.DataFrame: ...


class Database:
    migrations: Migrations = ...
    migrations_class: Type[Migrations] = ...
    table_map: dict[str, Table] = ...
    database_name: str = ...
    table_instances: list[Table] = ...
    objects: DatabaseManager = ...

    def __init__(self, name: str, *tables: Table): ...
    def __repr__(self) -> str: ...
    def __getitem__(self, table_name: str) -> Table: ...
    def __getattribute__(self, name: str) -> Union[Table, Any]: ...

    def get_table(self, table_name: str) -> Table: ...
    def make_migrations(self) -> None: ...
    def migrate(self) -> None: ...
