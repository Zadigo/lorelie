from typing import Any, Literal, OrderedDict, Type

from lorelie.backends import SQLiteBackend
from lorelie.constraints import CheckConstraint
from lorelie.database.base import Database
from lorelie.fields.base import Field
from lorelie.database.indexes import Index
from lorelie.queries import Query


class BaseTable(type):
    def __new__(
        cls, name: str,
        bases: tuple,
        attrs: dict
    ) -> type: ...
    @classmethod
    def prepare(cls, table: type) -> None: ...


class AbstractTable(metaclass=BaseTable):
    query_class: Type[Query] = ...
    backend_class: Type[SQLiteBackend] = ...
    backend: SQLiteBackend = ...
    is_prepared: bool = Literal[False]

    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, value: Any) -> bool: ...
    def __bool__(self) -> bool: ...

    def validate_values(self, fields, values) -> Any: ...


class Table(AbstractTable):
    fields_map: OrderedDict[str, Field] = ...
    name: str = ...
    query: Query = ...
    indexes: list[str] = ...
    field_names: list[str] = ...
    auto_add_fields: set = ...
    auto_update_fields: set = ...

    def __init__(
        self,
        name: str,
        *,
        fields: list[Field] = ...,
        index: list[Index],
        constraints: list[CheckConstraint],
        ordering: list[str] = ...,
        str_field: str = Literal['id']
    ) -> None: ...

    def __repr__(self) -> str: ...
    def __eq__(self, table: Table) -> bool: ...
    def __getattribute__(self, name) -> Any: ...

    def _add_field(self, field_name: str, field: Field) -> list[str]: ...

    def has_field(
        self,
        name: str,
        raise_exception: bool = Literal[False]
    ) -> bool: ...

    def get_field(self, name: str) -> Field: ...
    def create_table_sql(self, fields: list[str]) -> list[str]: ...
    def drop_table_sql(self) -> list[str]: ...
    def build_field_parameters(self) -> list[str]: ...
    def prepare(self, database: Database) -> None: ...
