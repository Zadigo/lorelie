from typing import Any, Generator, List, Literal, Type, Union

import pandas

from lorelie.backends import BaseRow, SQLiteBackend
from lorelie.tables import Table


class Query:
    table: Table = ...
    _backend: SQLiteBackend = ...
    _sql: str = ...
    _sql_tokens: list[str] = ...
    result_cache: list[BaseRow] = ...
    alias_fields: list[str] = ...

    def __init__(
        self,
        sql_tokens: list[str],
        backend: SQLiteBackend = ...,
        table: Table = ...
    ) -> None: ...

    def __repr__(self) -> str: ...

    @classmethod
    def run_multiple(
        cls: Type[Query],
        backend: SQLiteBackend,
        *sqls: str,
        **kwargs
    ) -> Generator[Query]: ...

    @classmethod
    def create(
        cls: Type[Query],
        backend: SQLiteBackend,
        sql_tokens: List[str],
        table: Table = ...
    ) -> Query: ...

    @classmethod
    def run_script(
        cls: Type[Query],
        sql_tokens: List[str],
        backend: SQLiteBackend = ...,
        table: Table = ...
    ) -> Union[Query, bool]: ...

    def prepare_sql(self) -> None: ...
    def run(self, commit: bool = ...) -> None: ...
    def transform_to_python(self) -> None: ...


class ValuesIterable:
    queryset: QuerySet = ...
    fields: list[str] = ...

    def __init__(
        self,
        queryset: QuerySet,
        fields: list[str] = ...
    ) -> None: ...

    def __iter__(self) -> list[dict[str, Any]]: ...


class QuerySet:
    query: Query = ...
    result_cache: list[BaseRow] = ...
    skip_transform: bool = Literal[False]

    def __init__(self, query: Query, skip_transform: bool = Literal[False]) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __getitem__(self, index: int) -> BaseRow: ...
    def __iter__(self) -> Generator[BaseRow]: ...

    def load_cache(self) -> None: ...
    def first(self) -> BaseRow: ...
    def last(self) -> BaseRow: ...
    def all(self) -> QuerySet[BaseRow]: ...
    def filter(self, *args, **kwargs) -> QuerySet[BaseRow]: ...
    def get(self, **kwargs) -> BaseRow: ...
    def annotate(self, **kwargs) -> QuerySet[BaseRow]: ...
    def values(self, *fields: str) -> ValuesIterable: ...
    def dataframe(self, *fields: str) -> pandas.DataFrame: ...
    def aggregate(self, *args, **kwargs) -> dict[str, int]: ...
    def count(self) -> int: ...
    def exclude(self, **kwargs: str) -> QuerySet[BaseRow]: ...
    def update(self, **kwargs) -> int: ...
    def order_by(self, *fields: str) -> QuerySet[BaseRow]: ...
