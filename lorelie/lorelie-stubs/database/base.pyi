import dataclasses
import pathlib
from typing import Any, List, Literal, OrderedDict, Type, Union


from lorelie.backends import SQLiteBackend
from lorelie.database.manager import DatabaseManager
from lorelie.fields.relationships import ForeignKeyField
from lorelie.database.migrations import Migrations
from lorelie.tables import Table


class Databases:
    database_map: OrderedDict[str, Database] = ...

    def __init__(self) -> None: ...
    def __getitem__(self, name: str) -> Database: ...
    def __contains__(self, value: Any) -> bool: ...

    @property
    def created_databases(self) -> List[Database]: ...
    
    def register(self, database: Database) -> None: ...


databases: Databases


@dataclasses.dataclass
class RelationshipMap:
    left_table: Table
    right_table: Table
    relationship_type: str = Literal['foreign']
    field: Union[ForeignKeyField] = ...
    can_be_validated: bool = ...
    error_message: str = ...

    def __post_init__(self) -> None: ...
    def __repr__(self) -> str: ...

    @property
    def relationship_field_name(self) -> Union[str, None]: ...
    @property
    def forward_field_name(self) -> str: ...
    @property
    def backward_field_name(self) -> str: ...
    @property
    def backward_related_field(self) -> str: ...
    def creates_relationship(self, table) -> bool: ...


class Database:
    migrations_class: Type[Migrations] = ...
    backend_class: Type[SQLiteBackend] = ...
    database_name: str = ...
    migrations: Migrations = ...
    table_map: dict[str, Table] = ...
    table_instances: list[Table] = ...
    objects: DatabaseManager = ...
    path: pathlib.Path = ...
    relationships: RelationshipMap = ...

    def __init__(self, *tables: Table, name: str = ...): ...
    def __repr__(self) -> str: ...
    def __getitem__(self, table_name: str) -> Table: ...
    def __getattribute__(self, name: str) -> Union[Table, Any]: ...
    def __contains__(self, value: Any) -> bool: ...
    def __hash__(self) -> int: ...

    @property
    def in_memory(self) -> bool: ...
    @property
    def table_names(self) -> list[str]: ...

    def get_table(self, table_name: str) -> Table: ...
    def make_migrations(self) -> None: ...
    def migrate(self) -> None: ...

    def foreign_key(
        self,
        left_table: Table,
        right_table: Table,
        on_delete,
        related_name: str = ...
    ) -> None: ...

    def many_to_many(
        self,
        left_table: Table,
        right_table: Table,
        primary_key: bool = True,
        related_name: str = ...
    ) -> None: ...

    def one_to_one_key(
        self,
        left_table: Table,
        right_table: Table,
        on_delete,
        related_name: str = ...
    ) -> None: ...
