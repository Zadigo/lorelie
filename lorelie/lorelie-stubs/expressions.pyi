from typing import Self, Union, override

from lorelie.backends import SQLiteBackend


class BaseExpression:
    template_sql: str = ...

    def as_sql(self, backend: SQLiteBackend) -> str: ...


class When(BaseExpression):
    condition: str = ...
    then_case: str = ...
    else_case: str = ...

    def __init__(self, condition: str, then_case: str, **kwargs) -> None: ...


class Case(BaseExpression):
    field_name: str = ...
    cases: list[When] = ...

    def __init__(self, *cases: When) -> None: ...


class OrderBy(BaseExpression):
    ascending: set = ...
    descending: set = ...
    fields: list = ...

    def __init__(self, fields: Union[list[str], tuple[str]]) -> None: ...
    def __bool__(self) -> bool: ...
    @classmethod
    def new(cls, fields: list[str]) -> OrderBy: ...
    def map_fields(self) -> None: ...


class CombinedExpression:
    EXPRESSION: str = ...
    others: list[Q] = ...
    children: list = ...

    def __init__(self, *funcs: Q) -> None: ...
    def __repr__(self) -> str: ...
    def __or__(self, other) -> Self: ...
    def __and__(self, other) -> Self: ...

    def build_children(self, operator: str = ...) -> None: ...
    def as_sql(self, backend) -> list[str]: ...


class Q(BaseExpression):
    def __init__(self, **expressions) -> None: ...
    def __repr__(self) -> str: ...
    def __and__(self, other: Q) -> CombinedExpression: ...
    def __or__(self, other: Q) -> CombinedExpression: ...
    @override
    def as_sql(self, backend: SQLiteBackend) -> list[str]: ...
