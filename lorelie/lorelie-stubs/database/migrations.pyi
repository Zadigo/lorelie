import pathlib
from dataclasses import dataclass
from functools import cached_property
from typing import DefaultDict, List, Literal, Type

from lorelie.backends import SQLiteBackend
from lorelie.database.base import Database
from lorelie.fields.base import Field
from lorelie.tables import Table


@dataclass
class Schema:
    table: type = ...
    database: type = ...
    fields: list = ...
    field_params: list = ...

    def __hash__(self) -> int: ...

    def prepare(self) -> None: ...


class Migrations:
    CACHE: dict[str] = ...
    backend_class = Type[SQLiteBackend]
    file: pathlib.Path = ...
    database: Database = ...
    database_name: str = ...
    file_id: str = ...
    migration_table_map: list[str] = ...
    fields_map: DefaultDict[list] = ...
    tables_for_creation: set = ...
    tables_for_deletion: set = ...
    existing_tables: set = ...
    has_migrations: bool = ...
    tables: dict[str] = ...
    migrated: bool = Literal[False]
    schemas: DefaultDict[Schema] = ...
    pending_migration: dict = ...

    def __init__(self, database: Database) -> None: ...
    def __repr__(self) -> str: ...

    @property
    def in_memory(self) -> bool: ...

    @cached_property
    def read_content(self) -> dict: ...

    def _write_fields(self, table: Table) -> None: ...

    def _write_indexes(self, table: Table,
                       backend: SQLiteBackend = ...) -> list: ...
    def _write_constraints(
        self, table: Table, backend: SQLiteBackend = ...) -> list: ...

    def create_migration_table(self) -> None: ...
    def migrate(self, table_instances: dict[str, Table]) -> None: ...
    def check_fields(self, table: Table, backend: SQLiteBackend) -> None: ...
    def blank_migration(self) -> dict[str]: ...
    def make_migrations(self, tables: List[Table]) -> None: ...
    def get_table_fields(self, name: str) -> list[dict[str]]: ...
    def reconstruct_table_fields(self, table: Table) -> list[Field]: ...
