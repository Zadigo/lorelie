from typing import Any, Literal, OrderedDict, Type


from lorelie.backends import SQLiteBackend
from lorelie.constraints import CheckConstraint
from lorelie.fields import Field
from lorelie.indexes import Index
from lorelie.queries import Query

class BaseTable(type):
    def __new__(
        cls, name: str, 
        bases: tuple, 
        attrs: dict
    ) -> type: ...
    @classmethod
    def prepare(cls, table: type) -> None: ...


class AbstractTable(metaclass=BaseTable):
    query_class: Type[Query] = ...
    backend_class: Type[SQLiteBackend] = ...
    backend: SQLiteBackend = ...
    is_prepared: bool = Literal[False]

    def __init__(self) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, value: Any) -> bool: ...

    def validate_values(self, fields, values) -> Any: ...
    # def bulk_create(
    #     self,
    #     objs: List[Union[dict, NamedTuple]]
    # ) -> List[BaseRow]: ...
    # def order_by(self, *fields: str) -> list[BaseRow]: ...


class Table(AbstractTable):
    fields_map: OrderedDict[str, Field] = ...
    name: str = ...
    query: Query = ...
    indexes: list[str] = ...
    field_names: list[str] = ...

    def __init__(
        self,
        name: str,
        *,
        fields: list[Field] = ...,
        index: list[Index],
        constraints: list[CheckConstraint],
        str_field: str = Literal['id']
    ) -> None: ...

    def __repr__(self) -> str: ...

    def has_field(
        self, 
        name: str,
        raise_exception: bool = Literal[False]
    ) -> bool: ...

    def get_field(self, name: str) -> Field: ...
    def create_table_sql(self, fields: list[str]) -> list[str]: ...
    def drop_table_sql(self, name: str) -> list[str]: ...
    def build_field_parameters(self) -> list[str]: ...
    def prepare(self) -> None: ...
